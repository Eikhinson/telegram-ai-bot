import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const body = await request.json();
    
    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text;
      const fromUser = message.from;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
      if (fromUser.is_bot) {
        return NextResponse.json({ success: true });
      }
      
      let responseText = '';
      
      if (text === '/start') {
        responseText = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø NeuromaniaGPT –±–æ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º AI!

üß† –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ - –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ Claude 3.5 Haiku
üé® "–Ω–∞—Ä–∏—Å—É–π [–æ–ø–∏—Å–∞–Ω–∏–µ]" - —Å–æ–∑–¥–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX
üíª "–∫–æ–¥ [–∑–∞–¥–∞—á–∞]" - –ø–æ–º–æ–≥—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ DeepSeek

–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å: "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"`;
      }
      else if (text?.toLowerCase().startsWith('–Ω–∞—Ä–∏—Å—É–π')) {
        const prompt = text.slice(7).trim();
        
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatId,
              text: `üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: "${prompt}"\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...`
            })
          });
          
          // –í—ã–∑–æ–≤ FLUX —á–µ—Ä–µ–∑ A4F API
          const fluxResponse = await fetch('https://api.a4f.co/v1/images/generations', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.A4F_API_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: "flux-1.1-pro",
              prompt: prompt,
              n: 1,
              size: "1024x1024"
            })
          });
          
          const fluxResult = await fluxResponse.json();
          
          if (fluxResult.data?.[0]?.url) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendPhoto`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: chatId,
                photo: fluxResult.data[0].url,
                caption: `üé® "${prompt}"`
              })
            });
          } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          }
          
          return NextResponse.json({ success: true });
        } catch (error) {
          responseText = `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`;
        }
      }
      else if (text?.toLowerCase().startsWith('–∫–æ–¥')) {
        const task = text.slice(3).trim();
        
        try {
          const deepseekResponse = await fetch('https://api.a4f.co/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.A4F_API_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: "deepseek-v3",
              messages: [
                {
                  role: "system",
                  content: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ö–æ–¥ –æ—Ñ–æ—Ä–º–ª—è–π –≤ markdown."
                },
                {
                  role: "user",
                  content: task
                }
              ],
              max_tokens: 1500,
              temperature: 0.7
            })
          });
          
          const deepseekResult = await deepseekResponse.json();
          
          if (deepseekResult.choices?.[0]?.message?.content) {
            responseText = `üíª DeepSeek V3:\n\n${deepseekResult.choices[0].message.content}`;
          } else {
            throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek');
          }
        } catch (error) {
          responseText = `‚ùå –û—à–∏–±–∫–∞ DeepSeek: ${error.message}`;
        }
      }
      else if (text) {
        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Claude
        try {
          const claudeResponse = await fetch('https://api.a4f.co/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.A4F_API_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              model: "provider-3/claude-3.5-haiku",
              messages: [
                {
                  role: "system",
                  content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                  role: "user",
                  content: text
                }
              ],
              max_tokens: 1000,
              temperature: 0.8
            })
          });
          
          const claudeResult = await claudeResponse.json();
          
          if (claudeResult.choices?.[0]?.message?.content) {
            responseText = `üß† Claude 3.5 Haiku:\n\n${claudeResult.choices[0].message.content}`;
          } else {
            throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Claude');
          }
        } catch (error) {
          responseText = `‚ùå –û—à–∏–±–∫–∞ Claude: ${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –º–æ–¥–µ–ª—å.`;
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      if (responseText) {
        await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: responseText,
            parse_mode: 'Markdown'
          })
        });
      }
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
