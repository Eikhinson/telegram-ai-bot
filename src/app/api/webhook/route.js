import { NextResponse } from 'next/server';

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
const chats = new Map();

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 });
    }
    
    const messages = chats.get(userId) || [];
    return NextResponse.json({ messages });
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function POST(request) {
  try {
    const body = await request.json();
    const { message, userId } = body;
    
    if (!message || !userId) {
      return NextResponse.json({ error: 'Message and userId required' }, { status: 400 });
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let responseText = '';
    
    if (message.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {
      responseText = 'üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?';
    } else if (message.toLowerCase().startsWith('–Ω–∞—Ä–∏—Å—É–π')) {
      responseText = 'üé® –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º!';
    } else if (message.toLowerCase().startsWith('–∫–æ–¥')) {
      responseText = 'üíª –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º!';
    } else {
      responseText = `–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}". AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!`;
    }
    
    return NextResponse.json({ 
      success: true, 
      response: responseText,
      type: 'text'
    });
    
  } catch (error) {
    console.error('Chat API error:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (userId) {
      chats.delete(userId);
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
